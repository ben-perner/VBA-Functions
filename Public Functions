Option Explicit

Public Function Convert_Col_Letter_To_Col_Number(col_letter As String)

'purpose: convert a column letter to a column number

Convert_Col_Letter_To_Col_Number = Range(col_letter & 1).Column

End Function

Public Function Convert_Col_Number_To_Col_Letter(col_number As Long)

'purpose: convert a column number to a column letter

Convert_Col_Number_To_Col_Letter = Split(Cells(1, col_number).Address, "$")(1)

End Function

Public Function Find_Last_Row(Worksheet_Name As String, Optional Column_Number As Long)

'code adapted from https://stackoverflow.com/questions/11169445/error-in-finding-last-used-cell-in-excel-with-vba

Dim LastRow As Long
Dim TotalRowCount As Long

'Case 1: Find the Last Row for the given Column
If Column_Number > 0 And IsNumeric(Column_Number) Then

    With Sheets(Worksheet_Name)
        TotalRowCount = .Rows.Count
        LastRow = .Cells(TotalRowCount, Column_Number).End(xlUp).Row
    End With

Else:

    'Case 2: Find the Global Last Row in a Worksheet
    With Sheets(Worksheet_Name)
        If Application.WorksheetFunction.CountA(.Cells) <> 0 Then
      
            LastRow = .Cells.Find(What:="*", After:=.Range("A1"), LookAt:=xlPart, LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False).Row
        
        Else:
        
            LastRow = 1
          
        End If
    End With

End If

Find_Last_Row = LastRow

End Function

Public Function Check_If_Worksheet_Exists(shtName As String, Optional wb As Workbook) As Boolean

'purpose: check and see if a worksheet exists with a specified name
Dim sht As Worksheet

If wb Is Nothing Then Set wb = ThisWorkbook

On Error Resume Next
    Set sht = wb.Sheets(shtName)
On Error GoTo 0

worksheetexists = Not sht Is Nothing

End Function

Public Function IsIn(strKeyword As String, strText As String)

If UCase(strText) Like "*" & UCase(strKeyword) & "*" Then IsIn = True Else IsIn = False
    
End Function
Public Function Make_List(ws As Worksheet, list_range As Range, delimiter As String, Optional separator As String, Optional wrapper As String) As String

'PURPOSE: create a list from a range with a delimiter between each item. can also have a separator around each item. ex ', "

Dim x As Long

Dim list_range_FR As Long
Dim list_range_LR As Long
Dim list_range_Col As Long
Dim begin_wrapper As String
Dim end_wrapper As String

'=========================================
list_range_FR = list_range.row
list_range_LR = list_range.Rows.Count + list_range.row - 1
list_range_Col = list_range.Column
begin_wrapper = Left(wrapper, 1)
end_wrapper = Right(wrapper, 1)

For x = list_range_FR To list_range_LR

    If x = list_range_FR Then Make_List = separator & ws.Cells(x, list_range_Col).Value & separator
    
    If x <> list_range_FR Then Make_List = Make_List & delimiter & separator & ws.Cells(x, list_range_Col).Value & separator

Next x

Make_List = begin_wrapper & Make_List & end_wrapper

End Function
Public Function FileExist(FilePath As String) As Boolean
'PURPOSE: test to see if a file exists or not

Dim TestStr As String

'test file path
    On Error Resume Next
        TestStr = Dir(PathName:=FilePath)
    On Error GoTo 0
    
'determine if file exists
    If TestStr = "" Then
        
        FileExist = False
    
        Else:
        
            FileExist = True
            
    End If

End Function
Public Function SuperMid(ByVal strMain As String, str1 As String, str2 As String, Optional reverse As Boolean) As String
'DESCRIPTION: Extract the portion of a string between the two substrings defined in str1 and str2.
'DEVELOPER: Ryan Wells (wellsr.com)
'HOW TO USE: - Pass the argument your main string and the 2 strings you want to find in the main string.
' - This function will extract the values between the end of your first string and the beginning
' of your next string.
' - If the optional boolean "reverse" is true, an InStrRev search will occur to find the last
' instance of the substrings in your main string.
Dim i As Integer, j As Integer, temp As Variant
On Error GoTo errhandler:
If reverse = True Then
    i = InStrRev(strMain, str1)
    j = InStrRev(strMain, str2)
    If Abs(j - i) < Len(str1) Then j = InStrRev(strMain, str2, i)
    If i = j Then 'try to search 2nd half of string for unique match
        j = InStrRev(strMain, str2, i - 1)
    End If
Else
    i = InStr(1, strMain, str1)
    j = InStr(1, strMain, str2)
    If Abs(j - i) < Len(str1) Then j = InStr(i + Len(str1), strMain, str2)
    If i = j Then 'try to search 2nd half of string for unique match
        j = InStr(i + 1, strMain, str2)
    End If
End If
If i = 0 And j = 0 Then GoTo errhandler:
If j = 0 Then j = Len(strMain) + Len(str2) 'just to make it arbitrarily large
If i = 0 Then i = Len(strMain) + Len(str1) 'just to make it arbitrarily large
If i > j And j <> 0 Then 'swap order
    temp = j
    j = i
    i = temp
    temp = str2
    str2 = str1
    str1 = temp
End If
i = i + Len(str1)
SuperMid = Mid(strMain, i, j - i)
Exit Function
errhandler:
MsgBox "Error extracting strings. Check your input" & vbNewLine & vbNewLine & "Aborting", , "Strings not found"
End
End Function